name: Reusable Build and Test

on:
  workflow_call:
    inputs:
      runner:
        required: true
        type: string
      tls_enabled:
        required: true
        type: boolean
      build_type:
        required: false
        type: string
        default: "Release"
        description: "Build type (Release or Debug)"
  workflow_dispatch:
    inputs:
      runner:
        required: true
        type: choice
        default: "ubuntu-x86_64"
        description: "Runner to use"
        options:
          - "ubuntu-x86_64" # x86_64
          - "windows-x86_64" # x86_64
          - "macos-13" # x86_64
          - "macos-latest" # arm64
          - "linux-arm64"
          - "win-arm64"
      tls_enabled:
        required: true
        type: boolean
        default: true
        description: "Enable TLS support"
      build_type:
        required: false
        type: choice
        default: "Release"
        description: "Build type"
        options:
          - "Release"
          - "Debug"

jobs:
  build:
    runs-on: ${{ inputs.runner }}
    
    env:
      VCPKG_DEFAULT_TRIPLET: ${{ (contains(inputs.runner, 'arm64') || contains(inputs.runner, 'macos-latest')) && (startsWith(inputs.runner, 'win') && 'arm64-windows-static' || 'arm64-linux') || (startsWith(inputs.runner, 'win') && 'x64-windows-static' || 'x64-linux') }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      VCPKG_FEATURE_FLAGS: "binarycaching"
      VCPKG_BINARY_SOURCES: clear;files,${{ github.workspace }}/vcpkg_cache,readwrite

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          
      - name: Setup CMake
        uses: lukka/get-cmake@latest

      - name: Restore vcpkg cache
        if: ${{ inputs.tls_enabled && (startsWith(inputs.runner, 'win') || startsWith(inputs.runner, 'ubuntu') || startsWith(inputs.runner, 'linux')) }}
        uses: actions/cache/restore@v4
        with:
          path: ${{ github.workspace }}/vcpkg_cache
          key: vcpkg-${{ env.VCPKG_DEFAULT_TRIPLET }}-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            vcpkg-${{ env.VCPKG_DEFAULT_TRIPLET }}-
            vcpkg-

      - name: Install build dependencies (Linux)
        if: ${{ inputs.tls_enabled && (startsWith(inputs.runner, 'ubuntu') || startsWith(inputs.runner, 'linux')) }}
        shell: bash
        run: |
          sudo apt-get update -qq
          sudo apt-get install -qq -y build-essential curl zip unzip tar pkg-config

      - name: Install OpenSSL via vcpkg (Linux)
        if: ${{ inputs.tls_enabled && (startsWith(inputs.runner, 'ubuntu') || startsWith(inputs.runner, 'linux')) }}
        uses: lukka/run-vcpkg@b3dd708d38df5c856fe1c18dc0d59ab771f93921
        with:
          vcpkgDirectory: /usr/local/share/vcpkg
          vcpkgJsonGlob: '**/vcpkg.json'
          vcpkgGitCommitId: 'ef7dbf94b9198bc58f45951adcf1f041fcbc5ea0'
          runVcpkgInstall: true

      - name: Install OpenSSL via vcpkg (Windows)
        if: ${{ inputs.tls_enabled && startsWith(inputs.runner, 'win') }}
        uses: lukka/run-vcpkg@b3dd708d38df5c856fe1c18dc0d59ab771f93921
        with:
          vcpkgDirectory: C:\\vcpkg
          vcpkgJsonGlob: '**/vcpkg.json'
          vcpkgGitCommitId: 'ef7dbf94b9198bc58f45951adcf1f041fcbc5ea0'
          runVcpkgInstall: true

      - name: Set up Go for httpbin
        if: ${{ !inputs.tls_enabled }}
        uses: actions/setup-go@v5
        with:
          go-version: 'stable'

      - name: Start httpbin server for non-TLS tests
        if: ${{ !inputs.tls_enabled }}
        run: go run github.com/mccutchen/go-httpbin/v2/cmd/go-httpbin@latest -port 8080 &
        shell: bash
      
      - name: Configure CMake
        shell: bash
        run: |
          BUILD_TYPE="${{ inputs.build_type || 'Release' }}"
          echo "Using build type: $BUILD_TYPE"
          
          CMAKE_ARGS=("-B" "build" "-S" "." "-DLIBFETCH_BUILD_TESTS=ON" "-DCMAKE_BUILD_TYPE=$BUILD_TYPE")
          if [[ "${{ inputs.tls_enabled }}" == "true" ]]; then
            CMAKE_ARGS+=("-DLIBFETCH_ENABLE_TLS=ON")
            if [[ "${{ runner.os }}" == "macOS" ]]; then
              CMAKE_ARGS+=("-DOPENSSL_ROOT_DIR=$(brew --prefix openssl@3)")
            elif [[ "${{ runner.os }}" == "Windows" ]]; then
              CMAKE_ARGS+=("-DCMAKE_TOOLCHAIN_FILE=C:\\vcpkg\\scripts\\buildsystems\\vcpkg.cmake")
              CMAKE_ARGS+=("-DVCPKG_TARGET_TRIPLET=${{ env.VCPKG_DEFAULT_TRIPLET }}")
            elif [[ "${{ runner.os }}" == "Linux" ]]; then
              CMAKE_ARGS+=("-DCMAKE_TOOLCHAIN_FILE=/usr/local/share/vcpkg/scripts/buildsystems/vcpkg.cmake")
              CMAKE_ARGS+=("-DVCPKG_TARGET_TRIPLET=${{ env.VCPKG_DEFAULT_TRIPLET }}")
            fi
          else
            CMAKE_ARGS+=("-DLIBFETCH_ENABLE_TLS=OFF")
          fi
          
          cmake "${CMAKE_ARGS[@]}"

      - name: Build project
        shell: bash
        run: |
          BUILD_TYPE="${{ inputs.build_type || 'Release' }}"
          
          # Set parallel jobs based on runner OS
          if [[ "${{ runner.os }}" == "macOS" ]]; then
            PARALLEL_JOBS=3
          else
            # Ubuntu/Linux and Windows
            PARALLEL_JOBS=4
          fi
          
          echo "Building with $PARALLEL_JOBS parallel jobs"
          cmake --build build --config $BUILD_TYPE --parallel $PARALLEL_JOBS

      - name: Run tests
        shell: bash
        run: |
          BUILD_TYPE="${{ inputs.build_type || 'Release' }}"
          echo "=== Running tests (Build type: $BUILD_TYPE) ==="
          cmake --build build --config $BUILD_TYPE --target run_tests

      - name: Save vcpkg cache
        if: ${{ inputs.tls_enabled && (startsWith(inputs.runner, 'win') || startsWith(inputs.runner, 'ubuntu') || startsWith(inputs.runner, 'linux')) }}
        uses: actions/cache/save@v4
        with:
          path: ${{ github.workspace }}/vcpkg_cache
          key: vcpkg-${{ env.VCPKG_DEFAULT_TRIPLET }}-${{ hashFiles('vcpkg.json') }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ inputs.runner }}-tls-${{ inputs.tls_enabled }}-${{ inputs.build_type || 'Release' }}
          path: build/